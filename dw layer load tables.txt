insert into cricket.dw.team_dim (team_name)
select distinct team_name from (
select first_team as team_name from cricket.clean.match_detail_clean
union all
select second_team as team_name from cricket.clean.match_detail_clean
);

select * from team_dim

insert into cricket.dw.player_dim (team_id,player_name)
select b.team_id,a.player
from cricket.clean.player_clean a join cricket.dw.team_dim b
on a.country=b.team_name
group by b.team_id,a.player;


select * from cricket.dw.player_dim

insert into cricket.dw.venue_dim (venue_name,city)
select venue,city from (
select venue,
case when city is null then 'NA'
else city end as city
from cricket.clean.match_detail_clean
)
group by 
venue,city;

select * from cricket.dw.venue_dim

select min(match_date),max(match_date) from cricket.clean.match_detail_clean


insert into cricket.dw.date_dim 
(full_dt ,
day ,
month ,
year ,
quarter ,
dayofweek ,
dayofmonth ,
dayofyear ,
dayofweekname ,
isweekend) 
with ctex as (
select min(match_date) as date
from cricket.clean.match_detail_clean
union all
select DATEADD(day, 1, TO_DATE(date)) as date
from ctex
where date<(select max(match_date) from cricket.clean.match_detail_clean)
)
select date,
extract(day from date) as day,
extract(month from date) as month,
extract(year from date) as year,
case when extract(quarter from date) in (1,2,3,4) then extract(quarter from date) end as quarter,
dayofweekiso(date) as dayofweek,
extract(day from date) as dayofmonth,
dayofyear(date) as dayofyear,
dayname(date) as dayofweekname,
case when dayname(date) in ('Sat','Sun') then 1 else 0 end as isweekend
from ctex

select * from cricket.dw.date_dim 

select * from cricket.dw.match_fact

insert into cricket.dw.match_fact 
select 
    m.match_type_number as match_id,
    dd.date_id as date_id,
    0 as referee_id,
    ftd.team_id as team_a_id,
    std.team_id as team_b_id,
    mtd.match_type_id as match_type_id,
    vd.venue_id as venue_id,
    50 as total_overs,
    6 as balls_per_overs,
    max(case when d.team = m.first_team then  d.over else 0 end ) as OVERS_PLAYED_BY_TEAM_A,
    sum(case when d.team = m.first_team then  1 else 0 end ) as balls_PLAYED_BY_TEAM_A,
    sum(case when d.team = m.first_team then  d.extras else 0 end ) as extra_balls_PLAYED_BY_TEAM_A,
    sum(case when d.team = m.first_team then  d.extras else 0 end ) as extra_runs_scored_BY_TEAM_A,
    0 fours_by_team_a,
    0 sixes_by_team_a,
    (sum(case when d.team = m.first_team then  d.total else 0 end ) + sum(case when d.team = m.first_team then  d.extras else 0 end ) ) as total_runs_scored_BY_TEAM_A,
    sum(case when d.team = m.first_team and player_out is not null then  1 else 0 end ) as wicket_lost_by_team_a,    
    max(case when d.team = m.second_team then  d.over else 0 end ) as OVERS_PLAYED_BY_TEAM_B,
    sum(case when d.team = m.second_team then  1 else 0 end ) as balls_PLAYED_BY_TEAM_B,
    sum(case when d.team = m.second_team then  d.extras else 0 end ) as extra_balls_PLAYED_BY_TEAM_B,
    sum(case when d.team = m.second_team then  d.extras else 0 end ) as extra_runs_scored_BY_TEAM_B,
    0 fours_by_team_b,
    0 sixes_by_team_b,
    (sum(case when d.team = m.second_team then  d.total else 0 end ) + sum(case when d.team = m.second_team then  d.extras else 0 end ) ) as total_runs_scored_BY_TEAM_B,
    sum(case when d.team = m.second_team and player_out is not null then  1 else 0 end ) as wicket_lost_by_team_b,
    tw.team_id as toss_winner_team_id,
    m.toss_decision as toss_decision,
    m.match_result as match_result,
    mw.team_id as winner_team_id
from 
    cricket.clean.match_detail_clean m
    join date_dim dd on m.match_date = dd.full_dt
    join team_dim ftd on m.first_team = ftd.team_name 
    join team_dim std on m.second_team = std.team_name 
    join match_type_dim mtd on m.match_type = mtd.match_type
    join venue_dim vd on m.venue = vd.venue_name and m.city = vd.city
    join cricket.clean.delivery_clean d  on d.match_type_number = m.match_type_number 
    join team_dim tw on m.toss_winner = tw.team_name 
    join team_dim mw on m.winner= mw.team_name 
    group by
        m.match_type_number,
        date_id,
        referee_id,
        team_a_id,
        team_b_id,
        match_type_id,
        venue_id,
        total_overs,
        toss_winner_team_id,
        toss_decision,
        match_result,
        winner_team_id;
        

CREATE or replace TABLE delivery_fact (
    match_id INT ,
    team_id INT,
    bowler_id INT,
    batter_id INT,
    non_striker_id INT,
    over INT,
    runs INT,
    extra_runs INT,
    extra_type VARCHAR(255),
    player_out VARCHAR(255),
    player_out_kind VARCHAR(255),

    CONSTRAINT fk_del_match_id FOREIGN KEY (match_id) REFERENCES match_fact (match_id),
    CONSTRAINT fk_del_team FOREIGN KEY (team_id) REFERENCES team_dim (team_id),
    CONSTRAINT fk_bowler FOREIGN KEY (bowler_id) REFERENCES player_dim (player_id),
    CONSTRAINT fk_batter FOREIGN KEY (batter_id) REFERENCES player_dim (player_id),
    CONSTRAINT fk_stricker FOREIGN KEY (non_striker_id) REFERENCES player_dim (player_id)
);

insert into delivery_fact
select 
    d.match_type_number as match_id,
    td.team_id,
    bpd.player_id as bower_id, 
    spd.player_id batter_id, 
    nspd.player_id as non_stricker_id,
    d.over,
    d.total,
    case when d.extras is null then 0 else d.extras end as extra_runs,
    case when d.extra_type is null then 'None' else d.extra_type end as extra_type,
    case when d.player_out is null then 'None' else d.player_out end as player_out,
    case when d.wicket_kind is null then 'None' else d.wicket_kind end as player_out_kind
from 
    cricket.clean.delivery_clean d
    join team_dim td on d.team = td.team_name
    join player_dim bpd on d.bowler = bpd.player_name
    join player_dim spd on d.batter = spd.player_name
    join player_dim nspd on d.non_striker = nspd.player_name;




